#!/usr/bin/env python3

# Example using jsrun:
#   cheetah-mpmd jsrun -n1 -r1 -a1 -c1 --cheetah-app ./gray-scott
#   settings-files.json : jsrun -n1 -r1 -a1 -c1 --cheetah-app pdf_calc
#   gs.bp pdf.bp
#
#   It creates an ERF file on Summit and submits the file using
#   jsrun --erf_input=erf_file_name

# Example using srun:
#   cheetah-mpmd srun -n4 -N2 --cheetah-app ./gray-scott settings-files.json :
#   -n1 --cheetah-app ./pdf-calc gs.bp pdf.bp
#
# Example using mpirun:
#   cheetah-mpmd mpirun -np 2 --cheetah-app ./gray-scott settings-files.json :
#   -np 1 --cheetah-app ./pdf-calc gs.bp pdf.bp


#!/usr/bin/env python3

import argparse
import sys
import os
import subprocess
import logging
import pdb


#----------------------------------------------------------------------------#
class Runner():
    def __init__(self, apps):
        self.runner = None
        self.apps = apps

    def execute(self):
        pass

    def _run(self, run_cmd):
        assert self.runner is not None
        err_msg = "{} failed. Aborting".format(self.runner)
        log.info("Running `{}`".format(" ".join(run_cmd)))
        try:
            pid = subprocess.Popen(run_cmd)
            pid.communicate()
            pid.wait()
            if pid.returncode != 0:
                log.error(err_msg)
                sys.exit(-1)
        except:
            log.error(err_msg)
            sys.exit(-1)
        log.info("DONE")


#----------------------------------------------------------------------------#
class JsrunRunner(Runner):
    def __init__(self, apps):
        Runner.__init__(self, apps)
        self.runner = 'jsrun'
        self._erf = "mpmd-cheetah-jsrun.erf"
        try:
            os.remove(self._erf)
        except:
            pass

    def execute(self):
        self._create_erf()
        run_cmd = ["jsrun","--erf_input={}".format(self._erf)]
        Runner._run(self, run_cmd)
        # os.remove(self._erf)

    def _create_erf(self):
        sub_erfs = []
        for i,a in enumerate(self.apps):
            sub_erfs.append(self._create_erf_dummy(a, i))
        self._create_main_erf_file(sub_erfs)
        self._remove_erf_dummies(sub_erfs)

    def _create_erf_dummy(self, app, index):
        erf_dummy = ".cheetah-mpmd-{}.erf".format(index)
        run_cmd = []
        run_cmd.append(self.runner)
        for arg in app.runner_args:
            run_cmd.append(arg)
        run_cmd.append("--erf_output={}".format(erf_dummy))
        run_cmd.append("true")
        log.debug("Running jsrun to create temporary erf file " \
                  "{}".format(erf_dummy))
        self._run_erf(run_cmd)
        return erf_dummy

    def _create_main_erf_file(self, sub_erfs):
        app_block = self._get_main_erf_app_block(sub_erfs)
        config_block = self._get_main_erf_config_block(sub_erfs[0])
        mapping_block = self._get_main_erf_mapping_block(sub_erfs)
        with open(self._erf, "w") as f:
            f.write(app_block)
            f.write(config_block)
            f.write(mapping_block)

    def _get_main_erf_app_block(self, sub_erfs):
        appid = -1
        app_block = ""
        for app in self.apps:
            appid = appid + 1
            app_block = app_block + "app {}: {}\n".format(appid, app.app)
        return app_block

    def _get_main_erf_config_block(self, sub_erf0):
        config_block = ""
        with open(sub_erf0) as f:
            lines = f.readlines()
        for line in lines:
            if line.startswith("rank:"):
                break
            if not line.startswith("app"):
                config_block = config_block + line
        return config_block

    def _get_main_erf_mapping_block(self, sub_erfs):
        hostid = 0
        mpmd_rankid = 0
        appid = -1
        mapping_block = ""
        subfiles = []
        for erf_out in sub_erfs:
            appid = appid + 1
            hostid = hostid + 1
            lines = []
            with open(erf_out) as f:
                lines = f.readlines()
            for line in lines:
                if line.startswith("rank:"):
                    cpu_mapping = line.split("cpu: ")[1].split(" : app")[0]
                    mapping_block = mapping_block + \
                                    "rank: {}:".format(mpmd_rankid) + \
                                    " {{ host: {};".format(hostid) + \
                                    " cpu: {}".format(cpu_mapping) + \
                                    " : app {}\n".format(appid)
                    mpmd_rankid = mpmd_rankid + 1
        return mapping_block

    def _remove_erf_dummies(self, sub_erfs):
        for f in sub_erfs:
            os.remove(f)


#----------------------------------------------------------------------------#
class SlurmRunner(Runner):
    def __init__(self, apps):
        Runner.__init__(self, apps)
        self.runner = 'srun'
        self.conf_file = "mpmd-cheetah-slurm.conf"

    def execute(self):
        self._create_slurm_conf()
        run_cmd = ['srun', '--multi-prog', '{}'.format(self.conf_file)]
        Runner._run(self, run_cmd)

    def _create_slurm_conf(self):
        log.info("Creating mpmd conf file {}".format(self.conf_file))
        mpmd_rankid = 0
        s = ""
        for app in self.apps:
            nprocs = self._get_app_nprocs(app.runner_args)
            s = s + "{}-{}".format(mpmd_rankid, mpmd_rankid+nprocs-1)
            s = s + "\t{}\n".format(app.app)
            mpmd_rankid = mpmd_rankid + nprocs
        try:
            with open(self.conf_file, "w") as f:
                f.write(s)
        except:
            log.error("Could not create conf file. Aborting")
            sys.exit(-1)
        log.info("Created conf file successfully")

    def _get_app_nprocs(self, runner_args):
        nprocs = 0
        for i,a in enumerate(runner_args):
            if a == '-n':
                nprocs = int(runner_args[i+1])
                break
            elif a.startswith('-n'):
                nprocs = int(a.split('-n')[1])
                break
        assert nprocs > 0
        return nprocs


#----------------------------------------------------------------------------#
class MpiexecRunner(Runner):
    def __init__(self, apps):
        Runner.__init__(self, apps)
        self.runner = 'mpirun'

    def execute(self):
        run_cmd = [self.runner]
        for i, a in enumerate(self.apps):
            run_cmd.extend(a.runner_args)
            run_cmd.append(a.app.exe)
            run_cmd.extend(a.app.args)
            if i < len(self.apps)-1: run_cmd = run_cmd + [":"]
        Runner._run(self, run_cmd)


#----------------------------------------------------------------------------#
class App:
    def __init__(self, l):
        self.exe = str(l[0])
        self.args = list(l[1:])

    def __str__(self):
        return (self.exe + " " + " ".join(self.args))


#----------------------------------------------------------------------------#
class AppCmd:
    """
    An object to hold each application launched in the MPMD command
    """
    def __init__(self, l_argv):
        """
        Attributes:
        l_argv
        """
        self._validate(l_argv)
        self.cmd = l_argv
        self.runner_args = self._get_runner_args()
        self.app = self._extract_cheetah_app()

    def __str__(self):
        str = ""
        str_l_argv = " ".join(self.cmd)

        # str_app_args = " ".join(self.app_args)

        str = str + "App command: {}\n".format(" ".join(self.cmd))
        str = str + "Runner args: {}\n".format(" ".join(self.runner_args))
        str = str + "App exe: {}\n".format(self.app.exe)
        str = str + "App arguments: {}\n".format(" ".join(self.app.args))
        return str

    def _validate(self, cmd):
        assert '--cheetah-app' in cmd, \
            "Did not find --cheetah-app in app run command '{}'".format(cmd)

    def _get_runner_args(self):
        runner_args = []
        for i,e in enumerate(self.cmd[:]):
            if e == '--cheetah-app':
                runner_args = self.cmd[:i]
                break
        assert len(runner_args) > 0, \
            "No arguments to jsrun/srun/mpirun found"
        return runner_args

    def _extract_cheetah_app(self):
        app = None
        for i,e in enumerate(self.cmd):
            if '--cheetah-app' in e:
                app = App(self.cmd[i+1:])
                break
        assert app is not None, \
            "Cheetah app command cannot be None '{}'".format(self)
        return app


#----------------------------------------------------------------------------#
def extract_cheetah_apps():
    """
    Extract all app execution commands.
    For example: The following command has two applications
    "cheetah-mpmd jsrun -p1 --cheetah-app echo hello :
    jsrun -p2 --cheetah-app echo hello2"
    """
    apps = []
    start_index = 2
    for i,e in enumerate(sys.argv[2:]):
        if e == ':':
            app_cmd = AppCmd(sys.argv[start_index:i+start_index])
            apps.append(app_cmd)
            start_index = start_index + i+1
    app_cmd = AppCmd(sys.argv[start_index:])
    apps.append(app_cmd)
    return apps

def get_runner(apps, runners):
    runcmd = sys.argv[1]
    assert runcmd in runners, \
        "Found {}. Expected jsrun/srun/mpirun".format(runner)

    return runners[runcmd](apps)

def print_usage():
    print("Usage:\n cheetah-mpmd <runner> <runner-args> "
          "--cheetah-app <app_exe> <app_args> : <runner_args> "
          "--cheetah-app <app_exe> <app_args> \n\n"
          "Example: \n cheetah-mpmd jsrun -n1 -r1 -a4 -c4 --cheetah-app "
          "./gray-scott settings-files.json : -n1 -r1 -a1 -c1 "
          "--cheetah-app ./pdf-calc gs.bp pdf.bp \n\n")
    sys.exit(0)

def parse_args(runners):
    """
    Lets use ArgumentParser next time
    """
    if len(sys.argv) <= 2: print_usage()
    if sys.argv[1] == '-h' or 'help' in sys.argv[1]: print_usage()

    assert sys.argv[1] in runners, \
        "Found {}. Expected jsrun/srun/mpirun".format(sys.argv[1])


#----------------------------------------------------------------------------#

loglevel = os.environ.get("LOG_LEVEL", "INFO")
logging.basicConfig(format='%(levelname)s: %(message)s',level=loglevel)
log = logging.getLogger("")

runners = {'jsrun':JsrunRunner, 'srun':SlurmRunner, 'mpirun':MpiexecRunner,
           'mpiexec': MpiexecRunner}

parse_args(runners)
apps = extract_cheetah_apps()
runner = get_runner(apps, runners)
runner.execute()
