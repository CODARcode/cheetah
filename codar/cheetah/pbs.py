"""
Module for generating PBS files for executing many jobs with the same
number of nodes.

TODO: define a common interface for schedulers, that works with at least
SLURM and PBS.

TODO: codify dir structure - scheduler dir contains scheduler script, has
subdir for each set of experiment parameters.
"""

import os.path


PBS_NAME = 'job.pbs'


PBS_FORMAT_TEMPLATE = """
#!/bin/bash
#PBS -N {name}
#PBS -A {project}
#PBS -l nodes={nodes}
#PBS -l walltime={walltime}

"""


# The standard strategy for getting scheduler output files to appear in
# a certain directory are to cd that directory before running qsub.
SUBMIT_FORMAT_TEMPLATE = """
#!/bin/bash

cd "{scheduler_directory}"
qsub {pbs_name}
"""


def open_pbs_file(scheduler_dir_path, name, project, nodes, walltime):
    """
    Open and write a PBS file to the specified path and return the open file
    object for further writing. Caller is responsible for closing the file.

    TODO: rather than passing back a file, this should probably return
    an object with an 'add_run' function. There should also be a template
    for the run output dir set somewhere - maybe other modules handle that,
    it should not be scheduler specific.
    """
    pbs_path = os.path.join(scheduler_dir_path, PBS_NAME)
    f = open(pbs_path, "w")
    f.write(PBS_FORMAT_TEMPLATE.format(name=name, project=project,
                                       nodes=nodes, walltime=walltime))
    return f


def write_run_script(script_out_path, scheduler_dir_path):
    """
    Write a bash script that will submit a PBS file generated by
    `open_pbs_file` with the correct working directory and enironment.
    This is the end user (experiment runner)'s entry point to start the
    experiment.
    """
    with open(script_out_path, 'w') as f:
        f.write(SUBMIT_FORMAT_TEMPLATE.format(
                    scheduler_directory=scheduler_dir_path,
                    pbs_name=PBS_NAME))
